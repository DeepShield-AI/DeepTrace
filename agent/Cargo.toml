[package]
name = "agent"
keywords = ["ebpf", "kernel", "linux", "network", "cloud"]
description = "The DeepTrace project aims to provide deep observability for complex cloud-native applications."
readme = "README.md"
version = "0.1.0"

authors.workspace = true
edition.workspace = true
repository.workspace = true
license.workspace = true
rust-version.workspace = true

[dependencies]
trace_common = { path = "src/trace/common", features = ["user"] }
provenance_common = { path = "src/provenance/common", features = ["user"]}

anyhow = { workspace = true, default-features = true }

arc-swap = { workspace = true }
aya = { workspace = true }
aya-log = { workspace = true }
bollard = { workspace = true }
bytes = { workspace = true, default-features = true }

# core_affinity = { version = "0.8.3", default-features = false }
clap = { workspace = true, features = ["derive"] }
chrono = { workspace = true, features = ["clock"]}
config = { workspace = true }
crossbeam-channel = { workspace = true }
dashmap = { workspace = true, default-features = false }
elasticsearch = { workspace = true }
env_logger = { workspace = true }
flate2 = { workspace = true, features = ["zlib-rs"], default-features = false }
libc = { workspace = true }
log = { workspace = true }

# kube = { version = "0.99.0", features = ["ws"] }
# k8s-openapi = { version = "0.24.0", features = ["v1_29"] }
nix = { workspace = true, features = ["process", "signal"] }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal", "fs", "io-std"] }
rocket = { workspace = true, features = ["json"]}
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
signal-hook = { workspace = true, features = ["iterator"] }
url = { workspace = true }

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
trace-ebpf = { path = "src/trace/ebpf" }
provenance-ebpf = { path = "src/provenance/ebpf" }

[[bin]]
name = "agent"
path = "src/main.rs"
